// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VirtualHealthProject.Data;

#nullable disable

namespace VirtualHealthProject.Migrations
{
    [DbContext(typeof(VirtualHealthDbContext))]
    partial class VirtualHealthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "04972214-ed08-4594-9db5-73c50192309c",
                            ConcurrencyStamp = "04972214-ed08-4594-9db5-73c50192309c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "18ebd57b-2075-4ceb-bd1a-e888697dffed",
                            ConcurrencyStamp = "18ebd57b-2075-4ceb-bd1a-e888697dffed",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "38d828e6-c344-4ec0-b295-3000f6d5ea06",
                            ConcurrencyStamp = "38d828e6-c344-4ec0-b295-3000f6d5ea06",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "9fa367bc-0217-4f68-b173-57af2db76cde",
                            ConcurrencyStamp = "9fa367bc-0217-4f68-b173-57af2db76cde",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "33e37ac0-d18d-49fa-8737-27a50d419f9a",
                            ConcurrencyStamp = "33e37ac0-d18d-49fa-8737-27a50d419f9a",
                            Name = "WardAdmin",
                            NormalizedName = "WARDADMIN"
                        },
                        new
                        {
                            Id = "a5395c94-33d2-45f0-a65d-024ff1e18291",
                            ConcurrencyStamp = "a5395c94-33d2-45f0-a65d-024ff1e18291",
                            Name = "ScriptManager",
                            NormalizedName = "SCRIPTMANAGER"
                        },
                        new
                        {
                            Id = "bd81ab2b-1df6-4b0e-938b-aa55f1ba5188",
                            ConcurrencyStamp = "bd81ab2b-1df6-4b0e-938b-aa55f1ba5188",
                            Name = "StockManager",
                            NormalizedName = "STOCKMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7f270bed-70c3-46c2-bd83-c47b73eb7e2d",
                            RoleId = "04972214-ed08-4594-9db5-73c50192309c"
                        },
                        new
                        {
                            UserId = "7f270bed-70c3-46c2-bd83-c47b73eb7e2d",
                            RoleId = "33e37ac0-d18d-49fa-8737-27a50d419f9a"
                        },
                        new
                        {
                            UserId = "15a39159-9060-4425-8c3e-ba218c4ca37d",
                            RoleId = "9fa367bc-0217-4f68-b173-57af2db76cde"
                        },
                        new
                        {
                            UserId = "a2f48359-0469-43b0-8654-f61b9d1ab286",
                            RoleId = "bd81ab2b-1df6-4b0e-938b-aa55f1ba5188"
                        },
                        new
                        {
                            UserId = "9668a0c8-1c05-4240-b413-18b4c4bf1873",
                            RoleId = "38d828e6-c344-4ec0-b295-3000f6d5ea06"
                        },
                        new
                        {
                            UserId = "854428da-d335-45ef-a793-dced73bbff77",
                            RoleId = "a5395c94-33d2-45f0-a65d-024ff1e18291"
                        },
                        new
                        {
                            UserId = "c4e8abc4-dbbf-406d-8031-20509b79c1a4",
                            RoleId = "18ebd57b-2075-4ceb-bd1a-e888697dffed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Admis", b =>
                {
                    b.Property<int>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdmissionId");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserId");

                    b.ToTable("Admis");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Admission", b =>
                {
                    b.Property<int>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdmissionId");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergyID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("AllergyID");

                    b.HasIndex("PatientID");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Bed", b =>
                {
                    b.Property<int>("BedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedID"));

                    b.Property<string>("AllocatedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AllocationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit")
                        .HasColumnName("is_occupied");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BedID");

                    b.HasIndex("RoomID");

                    b.ToTable("Beds", (string)null);
                });

            modelBuilder.Entity("VirtualHealthProject.Models.BedAllocation", b =>
                {
                    b.Property<int>("AllocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllocationID"));

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AllocationID");

                    b.HasIndex("BedID")
                        .IsUnique();

                    b.HasIndex("PatientID");

                    b.ToTable("BedAllocation", (string)null);
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Billing", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BedCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MedicationCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduledMedication")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.ChronicIllness", b =>
                {
                    b.Property<int>("ChronicIllnessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChronicIllnessID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ChronicIllnessID");

                    b.HasIndex("PatientID");

                    b.ToTable("ChronicIllnesses");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.ConsumableStockLevels", b =>
                {
                    b.Property<int>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumableId"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int>("StockLevel")
                        .HasColumnType("int");

                    b.HasKey("ConsumableId");

                    b.ToTable("ConsumableStockLevels");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.CurrentMedication", b =>
                {
                    b.Property<int>("CurrentMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrentMedicationID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("CurrentMedicationID");

                    b.HasIndex("PatientID");

                    b.ToTable("CurrentMedications");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Discharge", b =>
                {
                    b.Property<int>("DischargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DischargeId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DischargeDate")
                        .HasColumnType("date");

                    b.Property<string>("DischargeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DischargeId");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserId");

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.DispenceMedication", b =>
                {
                    b.Property<int>("DispenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispenceId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DispenceId");

                    b.ToTable("DispenceMedication");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.DoctorVisit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<string>("ChronicConditions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ChronicConditionsStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleIVMedication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleVMedication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduledMedication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.ToTable("DoctorVisit");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.DoctorVisits", b =>
                {
                    b.Property<int>("VisitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitsId"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VisitDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitsId");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorVisits");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.InventoryHistory", b =>
                {
                    b.Property<int>("InventoryHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryHistoryId"));

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryHistoryId");

                    b.ToTable("InventoryHistories");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.MedicalHistory", b =>
                {
                    b.Property<int>("MedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalHistoryID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("MedicalHistoryID");

                    b.HasIndex("PatientID");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.NurseDispense", b =>
                {
                    b.Property<int>("DispenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispenceId"));

                    b.Property<DateTime>("DatePrescribed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ScheduledMedication")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DispenceId");

                    b.ToTable("NurseDispense");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.NurseInstruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RemarkDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructionId");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserId");

                    b.ToTable("NurseInstructions");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChronicIllness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentMedication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryConcern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.PatientMovement", b =>
                {
                    b.Property<int>("PatientMovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientMovementID"));

                    b.Property<string>("Movement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MovementTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientMovementID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientMovements");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Prescription", b =>
                {
                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dispense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("Rf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rx")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sig")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.PrescriptionScript", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"));

                    b.Property<DateTime?>("DateDeliveredToWard")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateForwardedToPharmacy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateWritten")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserId");

                    b.ToTable("PrescriptionScripts");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.ReferralLetter", b =>
                {
                    b.Property<int>("ReferralID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReferralID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentMedications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryConcern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferralID");

                    b.ToTable("ReferralLetters");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.RequestConsumables", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConsumableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestConsumables");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7f270bed-70c3-46c2-bd83-c47b73eb7e2d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7ead30d-c0ba-4dcd-b45a-ee108014240d",
                            Email = "admin@virtualhealthbridge.com",
                            EmailConfirmed = false,
                            FirstName = "Justin",
                            LastName = "Fourie",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VIRTUALHEALTHBRIDGE.COM",
                            NormalizedUserName = "ADMIN@VIRTUALHEALTHBRIDGE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGCPXcTN646bJZTiDm/KnCk6Tq82jjEZxT97E6XM2nYoQqq+h5Idzu9oocXFYwC+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e0bb1ad-1dd2-495f-a7c1-62bd495a95f7",
                            TwoFactorEnabled = false,
                            UserName = "admin@virtualhealthbridge.com"
                        },
                        new
                        {
                            Id = "1a9554cf-747d-4afb-81c0-4114eb8f8733",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "324e7a39-3ffd-44a6-9b93-2570fcc4c8a7",
                            Email = "wardAdmin@virtualhealthbridge.com",
                            EmailConfirmed = false,
                            FirstName = "Qulon",
                            LastName = "Forbes",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARDADMIN@VIRTUALHEALTHBRIDGE.COM",
                            NormalizedUserName = "WARDADMIN@VIRTUALHEALTHBRIDGE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOvJJX2J8s2ghF7Z2cewj0LENK9VY2Z9WOvKVkI8ffFzzLrmpXU22zJv6HP4hyi07A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae945918-5f99-4769-a9ba-42353e5fcec4",
                            TwoFactorEnabled = false,
                            UserName = "wardAdmin@virtualhealthbridge.com"
                        },
                        new
                        {
                            Id = "15a39159-9060-4425-8c3e-ba218c4ca37d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f820a22b-4a6b-4564-bef3-62db7d0ed1f2",
                            Email = "pharmacist@virtualhealthbridge.com",
                            EmailConfirmed = false,
                            FirstName = "Sheldon",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHARMACIST@VIRTUALHEALTHBRIDGE.COM",
                            NormalizedUserName = "PHARMACIST@VIRTUALHEALTHBRIDGE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF7wYPCatLg9tehkqeYtoSqNSex9I4mLAnVuxCUzDaX3dYCzumLn3anNdfVifdzb8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a06311e-c643-4a17-ab2c-9e29b7499f3b",
                            TwoFactorEnabled = false,
                            UserName = "pharmacist@virtualhealthbridge.com"
                        },
                        new
                        {
                            Id = "a2f48359-0469-43b0-8654-f61b9d1ab286",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ff366a3-96d4-4f51-b702-2ac81649f07d",
                            Email = "stockmanager@virtualhealthbridge.com",
                            EmailConfirmed = false,
                            FirstName = "Brendon",
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "STOCKMANAGER@VIRTUALHEALTHBRIDGE.COM",
                            NormalizedUserName = "STOCKMANAGER@VIRTUALHEALTHBRIDGE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMKPQ8dC9eesbVUo+409cIq44qm1xr1b3K3nFnX9Hd89MuMan/iqwTbCMwYCTlI6dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8c84497-bb6f-4ab0-8a2a-dcafee3e7d02",
                            TwoFactorEnabled = false,
                            UserName = "stockmanager@virtualhealthbridge.com"
                        },
                        new
                        {
                            Id = "854428da-d335-45ef-a793-dced73bbff77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba9a0f3f-427e-4913-b63a-8795a508c060",
                            Email = "SCRIPTMANAGER@VIRTUALHEALTHBRIDGE.COM",
                            EmailConfirmed = false,
                            FirstName = "Bongani",
                            LastName = "Kunene",
                            LockoutEnabled = false,
                            NormalizedEmail = "SCRIPTMANAGER@VIRTUALHEALTHBRIDGE.COM",
                            NormalizedUserName = "SCRIPTMANAGER@VIRTUALHEALTHBRIDGE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECQuqv1qG8DSe1D9wwSzNX7gcHNa2ICvu2WrCBR9FceHXRLFXAonDCFROn0SglL+hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d07c94c9-338a-4ae2-a189-bc11928fd49c",
                            TwoFactorEnabled = false,
                            UserName = "scriptmanager@virtualhealthbridge.com"
                        },
                        new
                        {
                            Id = "9668a0c8-1c05-4240-b413-18b4c4bf1873",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b89a3ba-1c66-4a34-959b-4e97cfa147c1",
                            Email = "NURSE@VIRTUALHEALTHBRIDGE.COM",
                            EmailConfirmed = false,
                            FirstName = "Juliet",
                            LastName = "Links",
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@VIRTUALHEALTHBRIDGE.COM",
                            NormalizedUserName = "NURSE@VIRTUALHEALTHBRIDGE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGluucIf01HfhSTjg2+5df7SL9DOqGkFjlAoGffmDhE62pyOnGZvius6/91md/pgZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2148b24e-6f80-4399-a21e-8461e47ee9e9",
                            TwoFactorEnabled = false,
                            UserName = "nurse@virtualhealthbridge.com"
                        },
                        new
                        {
                            Id = "c4e8abc4-dbbf-406d-8031-20509b79c1a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e5db233-b7ab-4fbe-98f4-ff347280d366",
                            Email = "DOCTOR@VIRTUALHEALTHBRIDGE.COM",
                            EmailConfirmed = false,
                            FirstName = "Gregory",
                            LastName = "Pikk",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@VIRTUALHEALTHBRIDGE.COM",
                            NormalizedUserName = "DOCTOR@VIRTUALHEALTHBRIDGE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIGgQkExzOYOc2bHl0j+KeDOBfY9HLpZ66il3WIo9mvfnuAIhhLOndQ3Kx1EyQ+8yQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5df06f13-3696-4c99-a683-83eb0f4d4a67",
                            TwoFactorEnabled = false,
                            UserName = "doctor@virtualhealthbridge.com"
                        });
                });

            modelBuilder.Entity("VirtualHealthProject.Models.ViewConsumablesStock", b =>
                {
                    b.Property<int>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumableId"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int>("StockLevel")
                        .HasColumnType("int");

                    b.HasKey("ConsumableId");

                    b.ToTable("viewConsumablesStocks");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Vitals", b =>
                {
                    b.Property<int>("VitalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalsId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PulseRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleMedication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scheduleIVMedications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scheduleVMedications")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalsId");

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.WeeklyStockTakes", b =>
                {
                    b.Property<int>("StockTakeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTakeID"));

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConsumableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StockNeeded")
                        .HasColumnType("int");

                    b.HasKey("StockTakeID");

                    b.ToTable("WeeklyStockTakes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualHealthProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Admis", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualHealthProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Admission", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualHealthProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Allergy", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Bed", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.BedAllocation", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Bed", "Bed")
                        .WithOne("BedAllocation")
                        .HasForeignKey("VirtualHealthProject.Models.BedAllocation", "BedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.ChronicIllness", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany("ChronicIllnesses")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.CurrentMedication", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany("CurrentMedications")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Discharge", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualHealthProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.DoctorVisits", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualHealthProject.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.MedicalHistory", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.NurseInstruction", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualHealthProject.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.PatientMovement", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.PrescriptionScript", b =>
                {
                    b.HasOne("VirtualHealthProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualHealthProject.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Bed", b =>
                {
                    b.Navigation("BedAllocation")
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualHealthProject.Models.Patient", b =>
                {
                    b.Navigation("ChronicIllnesses");

                    b.Navigation("CurrentMedications");

                    b.Navigation("MedicalHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
