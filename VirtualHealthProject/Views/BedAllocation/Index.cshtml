@model VirtualHealthProject.Models.BedAllocationViewModel
@{
    ViewData["Title"] = "Bed Allocation";
    Layout = "_WardAdminLayout";
 
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Box Heading</title>
    <link rel="stylesheet" href="styles.css">
</head>

    <div class="box-heading">
        <h1>@ViewData["Title"]</h1>
    </div>
<a asp-action="Create" class="btn btn-primary">Allocate</a>

    <style>
        .box-heading {
          
            padding: 10px; 
            margin: 20px 0; 
            background-color: #f4f4f4; 
            border-radius: 5px; 
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1); 
        }

            .box-heading h1 {
                margin: 0; 
                font-size: 1.5em; 
                color: #333; 
                text-align: center; 
            }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                border: 1px solid #ddd;
                padding: 8px;
            }

            .table th {
                background-color: #f4f4f4;
            }

        .summary {
            margin-top: 20px;
            padding: 10px;
            border-top: 2px solid #ddd;
            font-weight: bold;
        }
    </style>
<div class="search-container">
    <input type="text" id="searchBedAllocationInput" onkeyup="searchBedAllocations()" placeholder="Search Bed Allocations..." class="form-control" />
</div>
<style>
    .search-container {
        display: flex;
        justify-content: flex-end; /* Align the search bar to the right */
        margin-bottom: 20px; /* Add some space below */
    }

        .search-container input {
            width: 300px; /* Set a custom width */
        }
</style>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Room Number</th>
                <th>Bed ID</th>
                <th>Availability Status</th>
                <th>Allocated To</th>
                 <th>Allocation Date </th>
                 <th>Action</th>
               
            </tr>
        </thead>
        <tbody>
            @if (Model.Beds != null && Model.Beds.Any())
            {
                foreach (var bed in Model.Beds)
                {
                    <tr> 
                        <td>@bed.RoomNumber</td>
                        <td>@bed.BedID</td>
                    <td>@(bed.AllocatedTo != "Not Allocated" ? "Occupied" : (bed.IsOccupied ? "Occupied" : "Available"))</td>
                        <td>@bed.AllocatedTo</td>
                        <td>@(bed.AllocationDate.HasValue ? bed.AllocationDate.Value.ToString("d") : "N/A")</td>
                    <td>
                        <a class="btn btn-sm btn-outline-info" asp-action="Edit" asp-route-id="@bed.BedID">Edit</a>
                        <a class="btn btn-sm btn-outline-success" asp-action="Details" asp-route-id="@bed.BedID">Details</a>
                        <a class="btn btn-sm btn-outline-danger" asp-action="Delete" asp-route-id="@bed.BedID">Delete</a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">No data available</td>
            </tr>
        }
        </tbody>
    </table>
<div class="summary">
    <p>Total Number of Beds: @Model.TotalBeds</p>
    <p>Number of Beds Available: @Model.AvailableBeds</p>
</div>
<script>
    function searchBedAllocations() {
        const input = document.getElementById('searchBedAllocationInput'); // Search input field
        const filter = input.value.toLowerCase(); // Convert search term to lowercase
        const table = document.getElementById('bedAllocationsTableBody'); // Bed allocations table body
        const rows = table.getElementsByTagName('tr'); // All rows in the table

        for (let i = 0; i < rows.length; i++) {
            const cells = rows[i].getElementsByTagName('td'); // All cells in the current row
            let rowContainsSearchTerm = false;

            // Loop through each cell in the row
            for (let j = 0; j < cells.length; j++) {
                const cell = cells[j];
                if (cell) {
                    const txtValue = cell.textContent || cell.innerText;
                    // Check if the search term is found in the cell
                    if (txtValue.toLowerCase().indexOf(filter) > -1) {
                        rowContainsSearchTerm = true;
                        break; // Exit loop if a match is found
                    }
                }
            }

            // Show or hide the row based on whether the search term was found
            rows[i].style.display = rowContainsSearchTerm ? "" : "none";
        }
    }
</script>
